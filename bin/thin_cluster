#!/usr/bin/env ruby
# Script used to launch multiple server instances.
# It takes most of the same argument as the +thin+ script
# plus the -n option to specify the number of servers to run.
# 
# Also you can store your options into a config file, create it like this:
#  thin_cluster -c /var/www/my_app/current config
# Then a config file will be created in /var/www/my_app/current/config/thin.yml
# with the default options.
# You can launch your 3 servers with:
#  thin_cluster start
# And stop them with:
#  thin_cluster stop
#
# Run <tt>thin_cluster -h</tt> to get help.

require File.dirname(__FILE__) + '/../lib/thin'
require 'thin/commander'
require 'thin/cluster'

Thin::Commander.new(ARGV) do |command|
  command.include_options :port, :address, :environment, :servers, :log_file, :pid_file, :config
  
  command.before do
    Dir.chdir command.options.cwd if command.options.cwd
    command.options.log_file ||= 'log/thin.log'
  end
  
  command.on :start do
    command.load_from_config
    
    cluster = Thin::Cluster.new(command.options.address, command.options.port, command.options.servers,
                                # Let Rails handle his thing and ignore files
                                Thin::RailsHandler.new('.', command.options.environment),
                                # Serve static files
                                Thin::DirHandler.new('public')
                               )
    cluster.log_file = command.options.log_file
    cluster.pid_file = command.options.pid_file

    cluster.start
  end

  command.on :stop do
    command.load_from_config
    
    cluster = Thin::Cluster.new(command.options.address, command.options.port, command.options.servers)
    cluster.log_file = command.options.log_file
    cluster.pid_file = command.options.pid_file

    cluster.stop
  end
  
  command.on :restart do
    command.load_from_config
    
    cluster = Thin::Cluster.new(command.options.address, command.options.port, command.options.servers,
                                # Let Rails handle his thing and ignore files
                                Thin::RailsHandler.new('.', command.options.environment),
                                # Serve static files
                                Thin::DirHandler.new('public')
                               )
    cluster.log_file = command.options.log_file
    cluster.pid_file = command.options.pid_file

    cluster.restart
  end
  
  command.on :config do
    command.dump_config
  end
end
